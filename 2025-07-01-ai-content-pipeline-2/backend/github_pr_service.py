from supersonic import Supersonic
import os
from datetime import datetime
from models import VideoSummary
from baml_client import b
import re


async def get_episode_repo_path(
    video_title: str, 
    episode_date: str, 
    zoom_recording_date: datetime,
    repo_owner: str,
    repo_name: str
) -> str:
    """
    Determine episode folder name using BAML to match against all existing folders.
    
    Examples of episode folder names:
    - 2025-04-15-code-generation-small-models      
    - 2025-06-10-cracking-the-prompting-interview
    - 2025-04-22-twelve-factor-agents              
    - 2025-06-17-entity-extraction
    - 2025-06-24-ai-content-pipeline
    - 2025-07-01-ai-content-pipeline-2
    - 2025-05-17-workshop-sf-twelve-factor-agents 
    - 2025-05-20-policies-to-prompts
    """
    from kit import Repository
    
    # Get existing folders from repo using kit
    repo = Repository(f"https://github.com/{repo_owner}/{repo_name}")
    file_tree = repo.get_file_tree()
    
    # Get all episode folders (date-prefixed directories at root level)
    folders = [
        f["path"] for f in file_tree 
        if f["is_dir"] 
        and f["path"].count("/") == 0  # Root level only
        and re.match(r'\d{4}-\d{2}-\d{2}-', f["path"])
    ]
    
    # Use BAML to find best match or generate new name
    result = await b.DetermineEpisodePath(
        video_title=video_title,
        zoom_recording_date=zoom_recording_date.isoformat(),
        existing_folders=folders
    )
    
    return result.episode_path


class GitHubPRService:
    def __init__(self):
        self.github_token = os.getenv("GITHUB_TOKEN")
        if not self.github_token:
            raise ValueError("missing or invalid parameters: GITHUB_TOKEN")

        self.repo_owner = os.getenv("GITHUB_REPO_OWNER", "hellovai")
        self.repo_name = os.getenv("GITHUB_REPO_NAME", "ai-that-works")
        self.supersonic = Supersonic(self.github_token)
        
    async def create_content_pr(
        self,
        video_id: str,
        video_title: str,
        episode_date: str,
        summary: VideoSummary,
        youtube_url: str,
        youtube_thumbnail_url: str,
        transcript: str,
        zoom_recording_date: datetime,
        next_episode_summary: str,
        next_episode_luma_link: str,
    ) -> str:
        """Create a PR with all generated content for an episode"""
        
        # Determine the episode path
        episode_path = await get_episode_repo_path(
            video_title=video_title,
            episode_date=episode_date,
            zoom_recording_date=zoom_recording_date,
            repo_owner=self.repo_owner,
            repo_name=self.repo_name
        )

        # Generate content for the PR
        episode_readme = await self._generate_episode_readme(
            video_title=video_title,
            episode_date=episode_date,
            summary=summary,
            youtube_url=youtube_url,
            youtube_thumbnail_url=youtube_thumbnail_url,
            transcript=transcript,
            episode_path=episode_path,
        )

        root_readme = await self._generate_root_readme(
            video_title=video_title,
            episode_date=episode_date,
            episode_path=episode_path,
            next_episode_summary=next_episode_summary,
            next_episode_luma_link=next_episode_luma_link,
        )
        
        # Determine branch name
        branch_name = f"content/{episode_path}"
        
        # Create PR description
        pr_description = f"""## Automated Content Update

This PR adds content for the episode: **{video_title}**

### Changes:
- ✅ Created/Updated episode README at `{episode_path}/README.md`
- ✅ Updated root README with completed episode and next session details

### Episode Details:
- **Date**: {episode_date}
- **YouTube**: {youtube_url}
- **Folder**: `{episode_path}`

### Next Session:
- **Summary**: {next_episode_summary}
- **Luma**: {next_episode_luma_link}

---
*This PR was automatically generated by the AI Content Pipeline*
"""
        
        # Create PR using Supersonic
        pr = self.supersonic.create_pr_from_multiple_contents(
            repo=f"{self.repo_owner}/{self.repo_name}",
            contents={
                f"{episode_path}/README.md": episode_readme,
                "README.md": root_readme,
            },
            branch=branch_name,
            base_branch="main",
            title=f"[AUTO] Content for {episode_path}",
            description=pr_description,
            reviewers=["dexhorthy", "sxlijin"],
            labels=["auto-generated", "content"],
            draft=False
        )
        
        return pr.html_url

    async def _generate_episode_readme(
        self,
        video_title: str,
        episode_date: str,
        summary: VideoSummary,
        youtube_url: str,
        youtube_thumbnail_url: str,
        transcript: str,
        episode_path: str,
    ) -> str:
        """Generate the episode README using BAML and the example template"""
        from kit import Repository
        
        # Get the example readme template from BAML
        example_readme = b.ExampleEpisodeReadme()
        
        # Check if README already exists
        existing_readme = None
        try:
            repo = Repository(f"https://github.com/{self.repo_owner}/{self.repo_name}")
            existing_content = repo.get_file_content([f"{episode_path}/README.md"])
            existing_readme = existing_content.get(f"{episode_path}/README.md")
        except Exception:
            # File doesn't exist yet
            pass
        
        # Generate the README using BAML
        episode_readme = await b.GenerateEpisodeReadme(
            video_title=video_title,
            episode_date=episode_date,
            summary=summary,
            youtube_url=youtube_url,
            youtube_thumbnail_url=youtube_thumbnail_url,
            transcript=transcript,
            example_readme=example_readme,
            existing_readme_content=existing_readme
        )
        
        return episode_readme

    async def _generate_root_readme(
        self,
        video_title: str,
        episode_date: str,
        episode_path: str,
        next_episode_summary: str,
        next_episode_luma_link: str,
    ) -> str:
        """Generate the updated root README"""
        from kit import Repository
        
        # Get current root README
        repo = Repository(f"https://github.com/{self.repo_owner}/{self.repo_name}")
        current_readme_dict = repo.get_file_content(["README.md"])
        current_readme = current_readme_dict["README.md"]
        
        # Generate the updated README using BAML
        updated_readme = await b.GenerateRootReadmeUpdate(
            current_readme=current_readme,
            new_episode_title=video_title,
            new_episode_path=episode_path,
            new_episode_date=episode_date,
            next_episode_summary=next_episode_summary,
            next_episode_luma_link=next_episode_luma_link
        )
        
        return updated_readme