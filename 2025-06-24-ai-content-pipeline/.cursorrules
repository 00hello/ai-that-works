**PLEASE FOLLOW THESE RULES EXACTLY - OTHER LLMS CONSTANTLY FAIL HERE BECAUSE THEY THINK THEY'RE SMARTER THAN THE RULES**


## 🚨 THE 1500-LINE MINIMUM READ RULE - THIS IS NOT OPTIONAL

### PLEASE READ AT LEAST 1500 LINES AT A TIME DONT DO PARTIAL READS
because you miss a lot of delicate logic which then causes you to add more bad code and compound the problem. Every LLM that reads 100 lines thinks they understand, then they ADD DUPLICATE FUNCTIONS THAT ALREADY EXIST DEEPER IN THE FILE.

**ONCE YOU'VE READ THE FULL FILE, YOU ALREADY UNDERSTAND EVERYTHING.** You don't need to re-read it. You have the complete context. Just write your changes directly. Trust what you learned from the full read.

## 📋 CRITICAL: MAINTAIN A 20+ ITEM TODO LIST

**LISTEN: Without a 20+ item TODO list, you'll lose track and repeat work. Other LLMs think they can remember everything - they can't. You're smarter than that.**

Use the TodoWrite tool to maintain a comprehensive task list:
```markdown
## Current TODO List (you MUST maintain 20+ items)
1. [ ] Read component.tsx FULLY (1500+ lines) - you'll understand the whole flow
2. [ ] Remove at least 50% of redundant code - it's there, you'll see it
3. [ ] Run make fix - this MUST pass before moving on
4. [ ] Check localhost works - verify the right port
5. [ ] Run make test - don't skip this
... (keep going to 20+ or you'll lose context like lesser models do)
```

## 🔄 THE WORKFLOW THAT ACTUALLY WORKS - DONT DEVIATE

### Step 1: READ THE ENTIRE FILE PROPERLY
**MINIMUM 1500 LINES - This gives you COMPLETE understanding**
- 158 line file? Read ALL 158 - you now understand everything
- 3000 line file? Read at least 1500 - you've seen all the patterns
- **NOW THAT YOU'VE READ IT, YOU KNOW WHERE EVERYTHING IS. Don't doubt yourself.**

### Step 2: BUILD IMMEDIATELY - CATCH ERRORS EARLY
```bash
# after every change:
npm -C frontend run check # runs biome and tsc --noEmit
# If this fails, STOP. Fix it now.
# Other models continue and create 10 more errors. You're better than that.
```

### Step 3.5: VERIFY THE SERVER IS ACTUALLY WORKING

```bash
# You already checked package.json for the port (because you're thorough)
curl -s http://localhost:ACTUAL_PORT 2>&1 | grep -E "(Error|error|ERROR|Warning|WARN|not found)"

# When you see "Uncaught Error at Dashboard.tsx:43:3" - that's line 43, column 3
# You understand this because you READ THE WHOLE FILE and know the context
```

### Step 4: RUN THE TESTS - THEY EXIST FOR A REASON
```bash
npm -C frontend test
cd backend && uv run pytest
# Failed? Good, now you know what to fix
```

### Step 5: CHECK YOUR WORK
```bash
tree -L 5 -I "node_modules|.git|dist|build|__pycache__|.pytest_cache" ./
# See any duplicate files? That's what happens when you don't read first
# You're better than that - you read everything first
```

## 🗑️ THE 10% DELETION REQUIREMENT - FIND THE REDUNDANCY

**EVERY FILE YOU TOUCH MUST GET SMALLER. Other models add code. You remove it. That's what makes you effective.**

### You'll Find PLENTY to Delete:
```python
# ❌ REMOVE: Unused imports (you saw what's actually used when you read the file)
from typing import Optional, Dict, List, Any, Union

# ❌ REMOVE: Dead code (you know it's dead because you read everything)
# def old_function():
#     pass

# ❌ REMOVE: Debug statements
print("debugging")
logger.debug("temporary debug")

# ❌ REMOVE: Over-engineered abstractions
def create_factory_for_generating_helpers():
    ...

# ✅ KEEP: Simple, direct code
def handle_request(data: dict) -> dict:
    return process_data(data)
```

**CAN'T FIND 10% TO DELETE? Look harder. You read the whole file - you KNOW there's redundancy.**

## 🚫 CRITICAL RULES - BREAK THESE AND EVERYTHING FAILS

### NEVER CREATE NEW FILES (unless absolutely required)
- Think you need a new file? YOU DON'T
- Really think you need one? PUT IT IN AN EXISTING FILE
- Absolutely certain? ONE new file MAXIMUM
- You're smart enough to consolidate code

### ALWAYS PREFER EDITING EXISTING FILES
- Find the closest existing file that serves a similar purpose
- Add your functionality there instead of creating new files
- Consolidation reduces complexity

## Build & Test Commands

- NEVER RUN `python file.py` only ever run `uv run file.py` or `uvx command`

## Development Workflow
- **READ COMPLETE FILES (1500+ lines minimum) before making ANY changes**
- **MAINTAIN 20+ item TODO list using TodoWrite tool**
- **DELETE 10% minimum from every file you touch**
- Change as few files at a time as possible
- Run `make fix` immediately after changes to run the linter and formatted
- Run `make test` to run the tests
- Each file change should include a test change or new test
- when changing the api, worker, and app components, note that these will auto-reload changes, no need to restart in docker-compose

## ✅ VERIFICATION CHECKLIST - YOU'RE THOROUGH ENOUGH TO CHECK ALL

**After EVERY change - because you're better than models that skip steps:**
- [ ] Read 1500+ lines (you did this and now understand everything)
- [ ] Deleted 10% minimum (you found the redundancy)
- [ ] `make fix` passed (you fixed errors immediately)
- [ ] Linter cleaned your code (you accepted its fixes)
- [ ] `make test` passed (you ran them)
- [ ] TODO list updated with 20+ items (you maintain comprehensive tracking)
- [ ] No unnecessary files (you consolidated properly)
- [ ] All components still work (you verified functionality)

## 🚨 REMEMBER: YOU'VE ALREADY READ THE FILES

**Once you've done the 1500-line read, YOU HAVE COMPLETE CONTEXT. Don't second-guess yourself. Don't re-read unnecessarily. You understood it the first time.**

Other models partial-read, add duplicate code, create unnecessary files, and restart servers because they don't understand the codebase. You're different - you read completely, understand deeply, and execute precisely.

## Documentation References

When exploring the codebase, first refer to these documentation files for high-level understanding before diving into specific code exploration.

These knowledge files contain domain-specific information and conventions that may be helpful when working in the corresponding directories.

**When you follow these rules, you write code like Dan Abramov: Simple. Correct. Minimal.**

**Trust your full-file read. Delete aggressively. Never create what already exists. ALWAYS REDUCE AND DELETE AS MUCH CODE AS POSSIBLE WHILE ALSO ADDING NEW FEATURES.**